import browser_cookie3
import logging
import os
from datetime import datetime, timedelta

# Настройка логирования
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def generate_cookies_file(browser="edge", output_file="cookies.txt"):
    """
    Извлекает cookies для youtube.com из указанного браузера и сохраняет их в cookies.txt.
    Args:
        browser (str): Название браузера ('chrome', 'firefox', 'edge').
        output_file (str): Путь к файлу для сохранения cookies.
    Returns:
        bool: True, если cookies успешно сохранены, False в случае ошибки.
    """
    try:
        logger.info(f"Извлечение cookies из браузера {browser} для youtube.com")
        
        # Извлечение cookies
        if browser.lower() == "chrome":
            cookies = browser_cookie3.chrome(domain_name="youtube.com")
        elif browser.lower() == "firefox":
            cookies = browser_cookie3.firefox(domain_name="youtube.com")
        elif browser.lower() == "edge":
            cookies = browser_cookie3.edge(domain_name="youtube.com")
        else:
            logger.error(f"Неподдерживаемый браузер: {browser}")
            return False

        if not cookies:
            logger.warning("Не найдены cookies для youtube.com. Убедитесь, что вы вошли в аккаунт YouTube в браузере.")
            return False

        # Проверка срока действия cookies
        valid_cookies = []
        now = datetime.now()
        for cookie in cookies:
            if cookie.expires and cookie.expires > 0:
                expiry = datetime.fromtimestamp(cookie.expires)
                if expiry < now:
                    logger.debug(f"Пропущен устаревший cookie: {cookie.name}")
                    continue
            valid_cookies.append(cookie)

        if not valid_cookies:
            logger.warning("Нет действующих cookies для youtube.com.")
            return False

        # Формирование файла в формате Netscape
        with open(output_file, "w", encoding="utf-8") as f:
            f.write("# Netscape HTTP Cookie File\n")
            f.write("# Generated by cookies.py\n\n")
            for cookie in valid_cookies:
                domain = cookie.domain
                flag = "TRUE" if domain.startswith(".") else "FALSE"
                path = cookie.path
                secure = "TRUE" if cookie.secure else "FALSE"
                expiry = cookie.expires if cookie.expires and cookie.expires > 0 else 0
                name = cookie.name
                value = cookie.value
                f.write(f"{domain}\t{flag}\t{path}\t{secure}\t{expiry}\t{name}\t{value}\n")

        logger.info(f"Cookies успешно сохранены в {output_file}")
        return True

    except Exception as e:
        logger.error(f"Ошибка при извлечении cookies: {e}")
        return False

def is_cookies_file_valid(file_path="cookies.txt", max_age_days=30):
    """
    Проверяет, существует ли cookies.txt и не устарел ли он.
    Args:
        file_path (str): Путь к файлу cookies.txt.
        max_age_days (int): Максимальный возраст файла в днях.
    Returns:
        bool: True, если файл существует и не устарел, False в противном случае.
    """
    if not os.path.exists(file_path):
        logger.warning(f"Файл {file_path} не найден.")
        return False

    file_mtime = datetime.fromtimestamp(os.path.getmtime(file_path))
    if datetime.now() - file_mtime > timedelta(days=max_age_days):
        logger.warning(f"Файл {file_path} устарел (старше {max_age_days} дней).")
        return False

    return True

if __name__ == "__main__":
    # Генерация cookies.txt при локальном запуске
    if generate_cookies_file(browser="edge", output_file="cookies.txt"):
        print("Cookies успешно сгенерированы! Можно использовать deploy_bot.py для загрузки на GitHub.")
    else:
        print("Ошибка генерации cookies. Убедитесь, что вы вошли в YouTube в Edge и браузер не открыт во время выполнения скрипта.")